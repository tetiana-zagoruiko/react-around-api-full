{"ast":null,"code":"const token = localStorage.getItem('jwt');\n\nclass Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = \"http://localhost:3000\";\n    this._headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  }\n\n  getCardList() {\n    console.log(\"here\", localStorage.getItem('jwt'));\n    console.log(this._headers.Authorization);\n    return fetch(this._baseUrl + '/cards', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  addCard({\n    name,\n    link\n  }) {\n    return fetch(this._baseUrl + '/cards', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  removeCard(cardID) {\n    return fetch(this._baseUrl + '/cards/' + cardID, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      method: \"DELETE\"\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    if (like) {\n      return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n        },\n        method: \"DELETE\"\n      }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n    } else {\n      return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n        },\n        method: \"PUT\"\n      }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n    }\n  }\n\n  setUserInfo(data) {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: data.name,\n        about: data.title\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  setUserAvatar(avatar) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      method: \"PATCH\",\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\"\n});\nexport default api;","map":{"version":3,"sources":["/Users/tanya/Dev/react-around-api-full/frontend/src/utils/Api.js"],"names":["token","localStorage","getItem","Api","constructor","baseUrl","headers","_baseUrl","_headers","getCardList","console","log","Authorization","fetch","then","res","ok","json","Promise","reject","statusText","getUserInfo","addCard","name","link","method","body","JSON","stringify","removeCard","cardID","changeLikeCardStatus","like","setUserInfo","data","about","title","setUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["const token = localStorage.getItem('jwt');\n\nclass Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = \"http://localhost:3000\";\n        this._headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n        }; \n    }\n\n    getCardList() {\n        console.log(\"here\", localStorage.getItem('jwt'));\n        console.log(this._headers.Authorization);\n        return fetch(this._baseUrl + '/cards', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            }\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    getUserInfo() { \n        return fetch(this._baseUrl + '/users/me', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            }\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    addCard({ name, link}) {\n        return fetch(this._baseUrl + '/cards', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            },\n            method: \"POST\",\n            body: JSON.stringify({\n                name,\n                link\n            })\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    removeCard(cardID) {\n        return fetch(this._baseUrl + '/cards/' + cardID, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            },\n            method: \"DELETE\"\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n\n    }\n\n    changeLikeCardStatus (cardID, like) {\n        if (like) {\n            return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n                },\n                method: \"DELETE\"\n            })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n        } else {\n            return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n                },\n                method: \"PUT\"\n            })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n        }\n    }\n\n    setUserInfo(data) {\n        return fetch(this._baseUrl + '/users/me', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            },\n            method: \"PATCH\",\n            body: JSON.stringify({\n                name: data.name,\n                about: data.title\n            })\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    setUserAvatar(avatar) {\n        return fetch(this._baseUrl + '/users/me/avatar', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            },\n            method: \"PATCH\",\n            body: JSON.stringify({\n                avatar\n            })\n        })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n}\n\nconst api = new Api({\n    baseUrl: \"http://localhost:3000\",\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}