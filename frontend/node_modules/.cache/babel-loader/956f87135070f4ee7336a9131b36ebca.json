{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  getCardList() {\n    console.log(localStorage.getItem('jwt'));\n    return fetch(this._baseUrl + '/cards', {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  addCard({\n    name,\n    link\n  }) {\n    return fetch(this._baseUrl + '/cards', {\n      headers: this._headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  removeCard(cardID) {\n    return fetch(this._baseUrl + '/cards/' + cardID, {\n      headers: this._headers,\n      method: \"DELETE\"\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    if (like) {\n      return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n        headers: this._headers,\n        method: \"DELETE\"\n      }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n    } else {\n      return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n        headers: this._headers,\n        method: \"PUT\"\n      }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n    }\n  }\n\n  setUserInfo(data) {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: this._headers,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: data.name,\n        about: data.title\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n  setUserAvatar(avatar) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      headers: this._headers,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText));\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\",\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/tanya/Dev/react-around-api-full/frontend/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","getCardList","console","log","localStorage","getItem","fetch","then","res","ok","json","Promise","reject","statusText","getUserInfo","addCard","name","link","method","body","JSON","stringify","removeCard","cardID","changeLikeCardStatus","like","setUserInfo","data","about","title","setUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers; \n    }\n\n    getCardList() {\n        console.log(localStorage.getItem('jwt'));\n        return fetch(this._baseUrl + '/cards', {\n            headers: this._headers\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    getUserInfo() { \n        return fetch(this._baseUrl + '/users/me', {\n            headers: this._headers\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    addCard({ name, link}) {\n        return fetch(this._baseUrl + '/cards', {\n            headers: this._headers,\n            method: \"POST\",\n            body: JSON.stringify({\n                name,\n                link\n            })\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    removeCard(cardID) {\n        return fetch(this._baseUrl + '/cards/' + cardID, {\n            headers: this._headers,\n            method: \"DELETE\"\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n\n    }\n\n    changeLikeCardStatus (cardID, like) {\n        if (like) {\n            return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n                headers: this._headers,\n                method: \"DELETE\"\n            })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n        } else {\n            return fetch(this._baseUrl + '/cards/' + cardID + '/likes', {\n                headers: this._headers,\n                method: \"PUT\"\n            })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n        }\n    }\n\n    setUserInfo(data) {\n        return fetch(this._baseUrl + '/users/me', {\n            headers: this._headers,\n            method: \"PATCH\",\n            body: JSON.stringify({\n                name: data.name,\n                about: data.title\n            })\n        })\n        .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n    setUserAvatar(avatar) {\n        return fetch(this._baseUrl + '/users/me/avatar', {\n            headers: this._headers,\n            method: \"PATCH\",\n            body: JSON.stringify({\n                avatar\n            })\n        })\n            .then(res => res.ok ? res.json() : Promise.reject('Error' + res.statusText))\n    }\n\n}\n\nconst api = new Api({\n    baseUrl: \"http://localhost:3000\",\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n    }\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}